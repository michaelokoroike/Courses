Video 1: Introduction to Aggregation
- We've learned LEFT/RIGHT/INNER JOINs, as well as filtering results with WHERE and ON clauses
- It's sometimes useful to look at row-level data, though often times this is less valuable than aggregated data
- This is done in SQL similarly to Excel (for columns);
  - COUNT = counts how many rows are in a column
  - SUM = adds all values in a column
  - MIN and MAX = returns lowest and highest values in particular columns
  - AVERAGE = calculates the average of all values in particluar column

Video 2: Introduction To NULLs
- NULL = not zero...no data

Video 3: NULLs and Aggregation
- Example: SELECT *
           FROM accounts
           WHERE id > 1500;
- In above example, we see a primary_poc is blank, maybe as a mistake or maybe the point of contact left the comany...we don't know
- To follow up and find NULL data in primary_poc column we would do:
- Example: SELECT *
           FROM accounts
           WHERE primary_poc IS NULL;
- Witn NULL you need to write IS NULL instead of '= NULL', because NULL is not a value like 0 or another number/string/etc, it is a property
- Inverse example: SELECT *
                   FROM accounts
                   WHERE primary_poc IS NOT NULL;

Video 4 (and Text): First Aggregation - COUNT
- Say we have an example like above and we want to return the amount of rows where id > 1500...all we'd have to do is update the SELECT statement
- Example: SELECT COUNT(*) as order_count
           FROM accounts
           WHERE id > 1500;
- This returns the amount of rows with the alias order_count thet have SOME NON-NULL DATA

Video 5: COUNT & NULLs
- Example: SELECT COUNT(*) as account_count
           FROM accounts
- Above returns the amount of rows in the data table
- Example: SELECT COUNT(id) as account_id_count
           FROM accounts
- Above returns the amount of rows in the id column in the data table that are non-null; if same as the example above it, there are no null values in the column

Video 6: SUM
- Example: SELECT SUM(standard_qty) AS standard,
                  SUM(gloss_qty) AS gloss,
                  SUM(poster_qty) AS poster
           FROM orders;
- This sums total in each column in the parentheses and gives them aliases

Video 7: MIN & MAX
- Example: SELECT MIN(standard_qty) AS standard_min,
                  MIN(gloss_qty) AS gloss_min,
                  MIN(poster_qty) AS poster_min,
                  MAX(standard_qty) AS standard_max,
                  MAX(gloss_qty) AS gloss_max,
                  MAX(poster_qty) AS poster_max
           FROM orders;
- This gives the maximum and minimum value in each column in the parentheses and gives them aliases

Video 8: AVG
- Example: SELECT AVG(standard_qty) AS standard_avg,
                  AVG(gloss_qty) AS gloss_avg,
                  AVG(poster_qty) AS poster_avg
           FROM orders;
- This gives the average order quantity in each column in the parentheses and gives them aliases
- Can only be used on numerical columns, and ignores NULLs completely

Video 9: GROUP BY
- GROUP BY allows for the creation of segments that will aggregate independent of one another
- GROUP BY always goes between the WHERE clause (if there is one) and the ORDER BY clause
- Example: SELECT account_id,
                  SUM(standard_qty) AS standard,
                  SUM(gloss_qty) AS gloss,
                  SUM(poster_qty) AS poster
           FROM orders
           GROUP BY account_id
           ORDER BY account_id;
- Above example groups these sums by account; whenever there's a field in the SELECT statement not being aggregated (like account_id), the query expects it to be in the GROUP BY clause

Video 10: GROUP BY Part 2
- You can GROUP BY multiple columns at once (already done -- see Quiz 3)
- ORDER BY list makes a difference (the first to last is left to right); order after GROUP BY doesn't make a difference
- You can substitute numbers for column names in ORDER BY and GROUP BY clause

Video 11: DISTINCT
- Essentially GROUP BY but don't want to use aggregations
- Example: SELECT DISTINCT column1, column2, column3
           FROM table1
           ORDER BY column1;
- This example would return the distinct rows across all three of these columns, ordered by the column1

Video 12: HAVING
- Essentially WHERE for aggregations
- Example: SELECT account_id,
                  SUM(total_amt_usd) AS sum_total_amt_usd,
           FROM orders
           GROUP BY 1
           HAVING SUM(total_amt_usd) >= 250000;
- This returns a query with just the account ids having more than 250k in total sales
- Note = use AS in SELECT statement when refenecing the same thing from different tables (ex: a.name, b.name may accidentally have the same result without extra clarification)

Video 13: DATE Functions
- Databases do YYYY MM DD (year is most important)
- But also exact in the date and time, which doesn't help much

Video 14: DATE Functions 2
- To group by day, make it YYYY MM DD 00:00:00 (make times not matter)
- Example: SELECT DATE_TRUNC('day', occurred_at) AS day,
                  SUM(standard_qty) AS standard_qty
           FROM orders
           GROUP BY DATE_TRUNC('day', occurred_at)
           ORDER BY DATE_TRUNC('day', occurred_at)
- Can use day, month, year for this function
- To pull out day of the week, use DATE_PART
- Example: SELECT DATE_PART('dow', occurred_at) AS day,     #'dow' is day of week
                  SUM(standard_qty) AS standard_qty
           FROM orders
           GROUP BY DATE_TRUNC('day', occurred_at)
           ORDER BY DATE_TRUNC('day', occurred_at)
- Note = Adding numbers after GROUP BY references the number of column in the SELECT statement
- Example: - Example: SELECT DATE_PART('dow', occurred_at) AS day,     #'dow' is day of week
                  SUM(standard_qty) AS standard_qty
           FROM orders
           GROUP BY 1     #DATE_PART('dow', occurred_at) reference
           ORDER BY 2     #standard_qty reference
- Note: use HAVING when your query has aggregations
