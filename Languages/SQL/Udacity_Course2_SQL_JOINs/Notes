Video 1: Motivation
- The real power of SQL is in working with multiple tables at once
- Relational database: refers to the fact that tables iwthin the datasets being worked with contain tables with common identifiers for easy coombination
- To do everything in a single Excel data set is not clean...too many different types of things a company needs to keep track of

Video 2: Why Would We Want to Split Data into Multiple Tables?
- Things like orders and accounts are separate objects and easier to organize if kept separate
- Multiple tables allows queries to execute more quickly (depends on the amount of data you want it to read and the number of modifications you want to be made)

Video 3: Introduction to JOINs
- Inner JOIN: First need SELECT and FROM clauses; inner JOIN is like a second FROM clause, and tells the query an additional table you'd like to pull data from
- Example: SELECT orders.*, accounts.* #grab everything from within tables
           FROM demo.orders #from a table within a database
           JOIN demo.accounts #also grab everything from this table
           ON orders.account_id = accounts.id #combine the two tables that the data is derived from by specifying the relationship between the two tables...account_id in the orders table is the same as id in the
                                                                                                                                                            accounts table
- Tables that a column comes from need to be specified in the SELECT statement

Video 4: Alias
- Give your table names aliases when trying to perform JOINs; do this by typing a space after the table name and typing the intended name after the space
- Example: SELECT o.*, a.*        #can refer to these as the alias at the SELECT level
           FROM demo.orders o     #o is the alias for the database
           JOIN demo.accounts a   #a is the alias for the database
           ON o.account_id = a.id #changed to o and a at the ON level

Video 5: Motivation for Other JOINs
- Inner JOINs is for 1 to 1 or 1 to many
- Outer JOINs are for everything, including 0s

Video 6: LEFT and RIGHT JOINs
- Inner JOINs only work for data that exist in both/all of the tables being joined
- Outer JOINs are for the data that don't exist in all of the adjoining tables
- Types of outer JOINs = Left join, Right join, and Full Outer join
- Must always have at least as many rows in the inner JOIN by definition
- Example: SELECT
           FROM left_table
           LEFT JOIN right_table #whatever comes after the LEFT JOIN clause, I'm guessing, is the right table?
- Above: Returns all matches with the right_table, and return any non matches from the left_table
- LEFT JOIN is the standard (it is effectively the same as right, so this one is the one chosen)
- My Question: Which is the left table, and which is the right table?

Video 7: JOINs and Filtering
- Combining data isn't an end unto itself
- Example: SELECT o.*, a.*       
           FROM demo.orders o     
           JOIN demo.accounts a   
           ON o.account_id = a.id
           WHERE a.sales_rep_id = 100
- Above example would include all information from both tables where the sales rep id is 100...but what if we wanted to mark all of the orders for sales rep id 100 while also keeping all others?
- Example: SELECT o.*, a.*       
           FROM demo.orders o     
           JOIN demo.accounts a   
           ON o.account_id = a.id AND a.sales_rep_id = 100
- Above example moves it to ON clause...includes only rows for sales rep 100 before JOIN is executed
