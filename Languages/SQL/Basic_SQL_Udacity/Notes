Video 1: SQL Introduction
- SQL has many uses in software development which we will learn; primarily focus on data analysis
- Good for people in marketing, operations, finance, and more
- Bulk of analyst/data scientist work happens in SQL

Video 2: The Parch & Posey Database
- This course uses data from Parch & Posey, a company that sells paper (fake)
- The company has 50 sales reps across the country in 4 regions; 
- Types of paper they sell includes regular, poster, and glossy;
- Their clients are large Fortune 500 companies that advertise using Google, Facebook, and Twitter
- Throughout course, we will be able to analyze which of their product lines are worst performing, and which advertising stream should the company be focused on

Video 3 (& Text): The Parch & Posey Database
- One way to store data is on spreadsheets
- When we need lots of spreadsheets to store data from different sources, we can visualize these using an ERD (Entity Relationship Diagram)...each spreadsheet is represented by a table; at the top is the title of
  the spreadsheet and below (in the diagram in the video) the column names are listed. SQL CAN USE THIS INFORMATION TO QUERY ACROSS ONE OR MULTIPLE TABLES.

Text: Map of SQL content
- Jobs that use SQL: https://www.zippia.com/advice/what-jobs-use-sql/ 
- Will learn: SQL Joins, SQL Basics, SQL Aggregations

Video 4: Why SQL
- A lot of the world's data is in databases, and these databases are most commonly accessed through SQL (Structured Query Language)
- Been around since 1970's
- Used to read, change, manipulate, analyze data
- Popular in analysis for a few reasons: 1) easy to learn/understand; 2) can access data directly (without everything needing to be in the same spreadsheet); 3) easy to audit and replicate; 4) can run queries on
  multiple tables at once...good for pivot table type of stuff (SUM, COUNT, MIN, MAX)...but excel maxes out at a million rows, while SQL allows for billions; 5) can ask more complex questions of data

Video 5: How Databases Store Data
- Similar to Excel, tables have rows and columns, but with databases, there is mandatory organization by column and each column must have a unique (and ideally descriptive) name
- In a database, all the data in a column must be of the same data type

Text: Types of Databases
- Many different types of SQL databsses for different purposes
- Popular ones are MySQL, Access, Oracle, Microsoft SQL Server, and Postgres
- We will use Postgres in the course which should mostly translate
- Article for differences: https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems

Video 6: Type of Statements
- Most basis element of SQL is a statement, which tells database what you'd like to do with the database
- CREATE TABLE = statement that creates a new table in a database
- DROP TABLE = statement that removes a table from a database
- SELECT = allows for reading data and displaying it, which is called a QUERY (majority of this is what is done in analytical work)

Video 7: SELECT & FROM
- SELECT statement is like filling out a form to get a set of results (questions are what database do you want to pull from, and which elements of the database do you want to pull from); these questions are
  structured in the same order every time. When writing out this statement, each of the statements are represented by a single word like SELECT or FROM, which are called CLAUSES.
- FROM clause tells the query which table to use; SELECT clause tells the query which column to use from the table (with column names separated by columns)...all column names are selected by doing
  SELECT *
- SELECT and FROM clauses are mandatory
- With just this information, you can read a table and export the results to Excel

Text: Formatting Best Practices
- COMMANDS ARE CAPITALIZED AND EVERYTHING ELSE NOT
- AVOID SPACES IN TABLE AND VARIABLE NAMES (instead of table name, do table_name)
- USE WHITE SPACE IN QUERIES
- ADD SEMICOLONS AT THE END OF STATEMENTS ("SELECT x FROM y" will work in the course's workspace, but best practice is "SELECT x FROM y;")

Video 8: LIMIT
- Aim of most quesries will be to see what a table looks like; scan first few rows of it to see what data you care about
- THe LIMIT clause is the way to see only a few lines of data and avoid queries taking too long to return; it is written in at the end of the query and is given a number (limit number of rows returned)
- Example = LIMIT 10 will return first 10 rows of a data table

Video 9: ORDER BY
- ORDER BY clause allows one to sort by date
- Must go between FROM and LIMIT clause, or query won't run
- Default is to go from smallest to largest (earlier to later); to flip it from largest to smallest (later to earlier) put DESC at the end of the ORDER BY

Video 10: ORDER BY Part 2
- You can do multiple columns of order to sort...the sorting happens by order
- In the video, there is ORDER BY account_id, total_amt_usd DESC...this orders the table by account, and then rearranges it by the largest to snallest orders ever made by the account

Video 11: WHERE
- WHERE clause allows filtering for specific set of results based on a specific set of criteria
- It goes after FROM but before ORDER BY or LIMIT
- Symbols: 
    - > (greater than) 
    - < (less than)
    - >= (greater than or equal to)
    - <= (less than or equal to)
    - = (equal to) 
    - != (not equal to)

Video 12: WHERE with Non-Numeric Data
- Can be used with words, etc
- The non-numeric data has to be in single quotes (ex: WHERE name = 'Michael')

Video 13: Arithmetic Operators
- Derived columns are columns that are manipulations of existing columns in the database
- To change the name of a derived column (that is a manipulation of existing columns, like an addition, multiplication, etc) add the AS clause to the end of the creation of the derived column
- Example of above: SELECT column1 + column2 AS column3 FROM table...column 3 for a table is the sum of what is in column1 and column2 in each row in the table dataset

Text: Logical Operators
- LIKE: This allows you to perform operations similar to using WHERE and =, but for cases when you might not know exactly what you are looking for.
- IN: This allows you to perform operations similar to using WHERE and =, but for more than one condition.
- NOT: This is used with IN and LIKE to select all of the rows NOT LIKE or NOT IN a certain condition.
- AND & BETWEEN: These allow you to combine operations where all combined conditions must be true.
- OR: This allows you to combine operations where at least one of the combined conditions must be true.

Video 14: LIKE
- LIKE clause is similar where you have a bunch of similar but slightly different values in any given column
- Example used is a column of google searches that all have the slightest differences in the endings
- LIKE requires the use of wildcards (example: SELECT * FROM orders [WHERE website LIKE '%google%']...wildcards are %, and this will return all rows in an orders table where the website contains google in it...it
  means to start with with any number of characters, then contains Google, then ends with any number of characters

Video 15: IN
- IN function allows you to filter data based on several possible values
- IN requires single quotation marks around non-numeriacal data
- Example: SELECT * FROM orders [WHERE website IN ('Amazon', 'EBay')]...this checks to see the items where you can filter out and see the rows in the orders table where orders where in Amazon and EBay
- Example (numerical): SELECT * FROM orders [WHERE id IN (1001, 1002)]...this checks to see the items where you can filter out and see the rows in the orders table where orders are made by account 1001 or 1002
- You can put as many values as you want in the parentheses, but there needs to be commas in between distinct values

Video 16: NOT
- NOT operator provides inverse for LIKE, IN, or similar operators
- IN Example (numerical): SELECT * FROM orders [WHERE id NOT IN (1001, 1002)]...this checks to see the items where you can filter out and see the rows in the orders table where orders are made by account other than 
  1001 or 1002
- LIKE Example: SELECT * FROM orders [WHERE website NOT LIKE '%google%']...this checks to see any website that does not contain google within it

Video 17: AND & BETWEEN
- AND operator used within WHERE statement to consider more than one logical clause at a time
- AND Example: SELECT * FROM orders [WHERE date > April 1 AND date < October 1]...this checks to see any order that went through between April and October
- BETWEEN operator is just a cleaner version of AND
- BETWEEN Example: SELECT * FROM orders [WHERE date BETWEEN April 1 AND October 1]...this also checks to see any order that went through between April and October

Video 18: OR
- OR is a logical operator that allows you to select rows that satisfy either of two conditions...similar to AND
- OR Example: SELECT * FROM orders [WHERE qty_orders_good1 = 0 OR qty_orders_good2 < 0]...this checks to see any account where no orders of good 1 or good 2 have been made
- Longer OR example: SELECT * FROM orders [WHERE (qty_orders_good1 = 0 OR qty_orders_good2 < 0) AND date_of_order >= '1-1-2016']...this checks to see any account where no orders of good 1 or good 2 were been made,
  and if the order came after January 1, 2016
