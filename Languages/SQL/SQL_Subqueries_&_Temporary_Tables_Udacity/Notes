Video 1: Introduction
- We will learn in this lesson to query the results of another query
- This will allow us to build out more transformations, organize work better, and make queries run faster

Video 2: Introduction to Subqueries
- Also known as inner queries or nested queries
- Allow you to answer more complex questions than you could with a single table
- 1) Start with querying the entire table to see if it can do what we need it for; 2) next we'll count all of the events in each channel by day; 3) then we'll want to average across events column we've created. This
  creates a subquery, which are required to have aliases
- Example: SELECT channel,
                  AVG(event_count) AS avg_event_count
           FROM
           (SELECT DATE('TRUNC', occurred_at) AS day,
                  channel,
                  COUNT(*) AS event_count
           FROM web_events
           GROUP BY 1,2)
           GROUP BY 1
           ORDER BY 2 DESC

Video 3: More On Subqueries
- Subqueries can be used anywhere you might use a table name, a column name, even an individual value
- Subqueries are especially good in conditional logic, in conjunction with WHERE and JOIN clauses, or in the WHEN portion of a CASE statement
- Example: Returning orders that occurred in the first month of business...get the first order by writing a subquery with a MIN function, with a DATE_TRUNC function to get the month...then write an outer query
  which uses the inner query to filter the orders table and sort by the occurred_at column. It will work because the result of the subquery, as is the case for most subqueries, has one-cell results. 
- Example (in code): SELECT *                                                      #select all data from the orders table
                     FROM orders
                     WHERE DATE_TRUNC('month', occurred_at) =                      #asks for a specific month to filter out for
                     (SELECT DATE_TRUNC('month', MIN(occurred_at)) AS min_month    #finds the month of the earliest orders in the company
                      FROM orders)   
                     ORDER BY occurred_at                                          #display from earliest to latest
- Note: When doing the quizzes, didn't need to ORDER BY or GROUP BY after the subquery...only did that when the outer query was SELECT *

Video 4: WITH
- For really long subqueries, maybe make it into its own query and then write it into the database as its own table. This can improve speed
- The main problem with subqueries is they can make the queries lengthy and difficult to read...Common Table Expression (CTEs) can help break the query into separate components so the query logic is more
  readable
- Example: WITH events AS ((SELECT DATE('TRUNC', occurred_at) AS day,
                                   channel,
                                   COUNT(*) AS event_count
                            FROM web_events
                            GROUP BY 1,2))

           SELECT channel,
                  AVG(event_count) AS avg_event_count
           FROM events
           GROUP BY 1
           ORDER BY 2 DESC
- See notes under Video 2 above: the query defined in WITH is the same as what is in the messy FROM statement above...this is a Common Table Expression
- Has to be used above the actual/final queries
- Can write as many as we want
- Each CTE gets an alias like a subquery

Video 5: Subquery Conclusion
- Learned subqueries and temp tables
- Following videos are more direct use cases
